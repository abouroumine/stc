// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package cc_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CCServiceClient is the client API for CCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CCServiceClient interface {
	StationRegister(ctx context.Context, in *Station, opts ...grpc.CallOption) (*Station, error)
	ShipCCInfo(ctx context.Context, in *wrapperspb.Int32Value, opts ...grpc.CallOption) (*Ship, error)
	AllStations(ctx context.Context, in *AllStationMsg, opts ...grpc.CallOption) (*Stations, error)
	AllStationsNoCondition(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Stations, error)
	AllStationsWithCondition(ctx context.Context, in *wrapperspb.FloatValue, opts ...grpc.CallOption) (*Stations, error)
	ShipRegister(ctx context.Context, in *wrapperspb.FloatValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AllShips(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Ships, error)
}

type cCServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCCServiceClient(cc grpc.ClientConnInterface) CCServiceClient {
	return &cCServiceClient{cc}
}

func (c *cCServiceClient) StationRegister(ctx context.Context, in *Station, opts ...grpc.CallOption) (*Station, error) {
	out := new(Station)
	err := c.cc.Invoke(ctx, "/space_traffic_control.CCService/stationRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCServiceClient) ShipCCInfo(ctx context.Context, in *wrapperspb.Int32Value, opts ...grpc.CallOption) (*Ship, error) {
	out := new(Ship)
	err := c.cc.Invoke(ctx, "/space_traffic_control.CCService/shipCCInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCServiceClient) AllStations(ctx context.Context, in *AllStationMsg, opts ...grpc.CallOption) (*Stations, error) {
	out := new(Stations)
	err := c.cc.Invoke(ctx, "/space_traffic_control.CCService/allStations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCServiceClient) AllStationsNoCondition(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Stations, error) {
	out := new(Stations)
	err := c.cc.Invoke(ctx, "/space_traffic_control.CCService/allStationsNoCondition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCServiceClient) AllStationsWithCondition(ctx context.Context, in *wrapperspb.FloatValue, opts ...grpc.CallOption) (*Stations, error) {
	out := new(Stations)
	err := c.cc.Invoke(ctx, "/space_traffic_control.CCService/allStationsWithCondition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCServiceClient) ShipRegister(ctx context.Context, in *wrapperspb.FloatValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/space_traffic_control.CCService/shipRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCServiceClient) AllShips(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Ships, error) {
	out := new(Ships)
	err := c.cc.Invoke(ctx, "/space_traffic_control.CCService/allShips", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CCServiceServer is the server API for CCService service.
// All implementations must embed UnimplementedCCServiceServer
// for forward compatibility
type CCServiceServer interface {
	StationRegister(context.Context, *Station) (*Station, error)
	ShipCCInfo(context.Context, *wrapperspb.Int32Value) (*Ship, error)
	AllStations(context.Context, *AllStationMsg) (*Stations, error)
	AllStationsNoCondition(context.Context, *emptypb.Empty) (*Stations, error)
	AllStationsWithCondition(context.Context, *wrapperspb.FloatValue) (*Stations, error)
	ShipRegister(context.Context, *wrapperspb.FloatValue) (*emptypb.Empty, error)
	AllShips(context.Context, *emptypb.Empty) (*Ships, error)
	mustEmbedUnimplementedCCServiceServer()
}

// UnimplementedCCServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCCServiceServer struct {
}

func (UnimplementedCCServiceServer) StationRegister(context.Context, *Station) (*Station, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StationRegister not implemented")
}
func (UnimplementedCCServiceServer) ShipCCInfo(context.Context, *wrapperspb.Int32Value) (*Ship, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShipCCInfo not implemented")
}
func (UnimplementedCCServiceServer) AllStations(context.Context, *AllStationMsg) (*Stations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllStations not implemented")
}
func (UnimplementedCCServiceServer) AllStationsNoCondition(context.Context, *emptypb.Empty) (*Stations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllStationsNoCondition not implemented")
}
func (UnimplementedCCServiceServer) AllStationsWithCondition(context.Context, *wrapperspb.FloatValue) (*Stations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllStationsWithCondition not implemented")
}
func (UnimplementedCCServiceServer) ShipRegister(context.Context, *wrapperspb.FloatValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShipRegister not implemented")
}
func (UnimplementedCCServiceServer) AllShips(context.Context, *emptypb.Empty) (*Ships, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllShips not implemented")
}
func (UnimplementedCCServiceServer) mustEmbedUnimplementedCCServiceServer() {}

// UnsafeCCServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CCServiceServer will
// result in compilation errors.
type UnsafeCCServiceServer interface {
	mustEmbedUnimplementedCCServiceServer()
}

func RegisterCCServiceServer(s grpc.ServiceRegistrar, srv CCServiceServer) {
	s.RegisterService(&CCService_ServiceDesc, srv)
}

func _CCService_StationRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Station)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCServiceServer).StationRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/space_traffic_control.CCService/stationRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCServiceServer).StationRegister(ctx, req.(*Station))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCService_ShipCCInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.Int32Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCServiceServer).ShipCCInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/space_traffic_control.CCService/shipCCInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCServiceServer).ShipCCInfo(ctx, req.(*wrapperspb.Int32Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCService_AllStations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllStationMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCServiceServer).AllStations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/space_traffic_control.CCService/allStations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCServiceServer).AllStations(ctx, req.(*AllStationMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCService_AllStationsNoCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCServiceServer).AllStationsNoCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/space_traffic_control.CCService/allStationsNoCondition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCServiceServer).AllStationsNoCondition(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCService_AllStationsWithCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.FloatValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCServiceServer).AllStationsWithCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/space_traffic_control.CCService/allStationsWithCondition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCServiceServer).AllStationsWithCondition(ctx, req.(*wrapperspb.FloatValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCService_ShipRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.FloatValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCServiceServer).ShipRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/space_traffic_control.CCService/shipRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCServiceServer).ShipRegister(ctx, req.(*wrapperspb.FloatValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCService_AllShips_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCServiceServer).AllShips(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/space_traffic_control.CCService/allShips",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCServiceServer).AllShips(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// CCService_ServiceDesc is the grpc.ServiceDesc for CCService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CCService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "space_traffic_control.CCService",
	HandlerType: (*CCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "stationRegister",
			Handler:    _CCService_StationRegister_Handler,
		},
		{
			MethodName: "shipCCInfo",
			Handler:    _CCService_ShipCCInfo_Handler,
		},
		{
			MethodName: "allStations",
			Handler:    _CCService_AllStations_Handler,
		},
		{
			MethodName: "allStationsNoCondition",
			Handler:    _CCService_AllStationsNoCondition_Handler,
		},
		{
			MethodName: "allStationsWithCondition",
			Handler:    _CCService_AllStationsWithCondition_Handler,
		},
		{
			MethodName: "shipRegister",
			Handler:    _CCService_ShipRegister_Handler,
		},
		{
			MethodName: "allShips",
			Handler:    _CCService_AllShips_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cc_proto.proto",
}
