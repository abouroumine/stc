// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthenticationInfoClient is the client API for AuthenticationInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthenticationInfoClient interface {
	Login(ctx context.Context, in *UserAuth, opts ...grpc.CallOption) (*JWTResponse, error)
	SignUp(ctx context.Context, in *UserAuth, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
}

type authenticationInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthenticationInfoClient(cc grpc.ClientConnInterface) AuthenticationInfoClient {
	return &authenticationInfoClient{cc}
}

func (c *authenticationInfoClient) Login(ctx context.Context, in *UserAuth, opts ...grpc.CallOption) (*JWTResponse, error) {
	out := new(JWTResponse)
	err := c.cc.Invoke(ctx, "/space_traffic_control.AuthenticationInfo/login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationInfoClient) SignUp(ctx context.Context, in *UserAuth, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, "/space_traffic_control.AuthenticationInfo/signUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthenticationInfoServer is the server API for AuthenticationInfo service.
// All implementations must embed UnimplementedAuthenticationInfoServer
// for forward compatibility
type AuthenticationInfoServer interface {
	Login(context.Context, *UserAuth) (*JWTResponse, error)
	SignUp(context.Context, *UserAuth) (*wrapperspb.BoolValue, error)
	mustEmbedUnimplementedAuthenticationInfoServer()
}

// UnimplementedAuthenticationInfoServer must be embedded to have forward compatible implementations.
type UnimplementedAuthenticationInfoServer struct {
}

func (UnimplementedAuthenticationInfoServer) Login(context.Context, *UserAuth) (*JWTResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthenticationInfoServer) SignUp(context.Context, *UserAuth) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUp not implemented")
}
func (UnimplementedAuthenticationInfoServer) mustEmbedUnimplementedAuthenticationInfoServer() {}

// UnsafeAuthenticationInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthenticationInfoServer will
// result in compilation errors.
type UnsafeAuthenticationInfoServer interface {
	mustEmbedUnimplementedAuthenticationInfoServer()
}

func RegisterAuthenticationInfoServer(s grpc.ServiceRegistrar, srv AuthenticationInfoServer) {
	s.RegisterService(&AuthenticationInfo_ServiceDesc, srv)
}

func _AuthenticationInfo_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAuth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationInfoServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/space_traffic_control.AuthenticationInfo/login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationInfoServer).Login(ctx, req.(*UserAuth))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationInfo_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAuth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationInfoServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/space_traffic_control.AuthenticationInfo/signUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationInfoServer).SignUp(ctx, req.(*UserAuth))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthenticationInfo_ServiceDesc is the grpc.ServiceDesc for AuthenticationInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthenticationInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "space_traffic_control.AuthenticationInfo",
	HandlerType: (*AuthenticationInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "login",
			Handler:    _AuthenticationInfo_Login_Handler,
		},
		{
			MethodName: "signUp",
			Handler:    _AuthenticationInfo_SignUp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// CCServiceClient is the client API for CCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CCServiceClient interface {
	StationRegister(ctx context.Context, in *Station, opts ...grpc.CallOption) (*Station, error)
	AllStations(ctx context.Context, in *AllStationMsg, opts ...grpc.CallOption) (*Stations, error)
	ShipRegister(ctx context.Context, in *wrapperspb.FloatValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AllShips(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Ships, error)
}

type cCServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCCServiceClient(cc grpc.ClientConnInterface) CCServiceClient {
	return &cCServiceClient{cc}
}

func (c *cCServiceClient) StationRegister(ctx context.Context, in *Station, opts ...grpc.CallOption) (*Station, error) {
	out := new(Station)
	err := c.cc.Invoke(ctx, "/space_traffic_control.CCService/stationRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCServiceClient) AllStations(ctx context.Context, in *AllStationMsg, opts ...grpc.CallOption) (*Stations, error) {
	out := new(Stations)
	err := c.cc.Invoke(ctx, "/space_traffic_control.CCService/allStations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCServiceClient) ShipRegister(ctx context.Context, in *wrapperspb.FloatValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/space_traffic_control.CCService/shipRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCServiceClient) AllShips(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Ships, error) {
	out := new(Ships)
	err := c.cc.Invoke(ctx, "/space_traffic_control.CCService/allShips", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CCServiceServer is the server API for CCService service.
// All implementations must embed UnimplementedCCServiceServer
// for forward compatibility
type CCServiceServer interface {
	StationRegister(context.Context, *Station) (*Station, error)
	AllStations(context.Context, *AllStationMsg) (*Stations, error)
	ShipRegister(context.Context, *wrapperspb.FloatValue) (*emptypb.Empty, error)
	AllShips(context.Context, *emptypb.Empty) (*Ships, error)
	mustEmbedUnimplementedCCServiceServer()
}

// UnimplementedCCServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCCServiceServer struct {
}

func (UnimplementedCCServiceServer) StationRegister(context.Context, *Station) (*Station, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StationRegister not implemented")
}
func (UnimplementedCCServiceServer) AllStations(context.Context, *AllStationMsg) (*Stations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllStations not implemented")
}
func (UnimplementedCCServiceServer) ShipRegister(context.Context, *wrapperspb.FloatValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShipRegister not implemented")
}
func (UnimplementedCCServiceServer) AllShips(context.Context, *emptypb.Empty) (*Ships, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllShips not implemented")
}
func (UnimplementedCCServiceServer) mustEmbedUnimplementedCCServiceServer() {}

// UnsafeCCServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CCServiceServer will
// result in compilation errors.
type UnsafeCCServiceServer interface {
	mustEmbedUnimplementedCCServiceServer()
}

func RegisterCCServiceServer(s grpc.ServiceRegistrar, srv CCServiceServer) {
	s.RegisterService(&CCService_ServiceDesc, srv)
}

func _CCService_StationRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Station)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCServiceServer).StationRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/space_traffic_control.CCService/stationRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCServiceServer).StationRegister(ctx, req.(*Station))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCService_AllStations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllStationMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCServiceServer).AllStations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/space_traffic_control.CCService/allStations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCServiceServer).AllStations(ctx, req.(*AllStationMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCService_ShipRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.FloatValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCServiceServer).ShipRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/space_traffic_control.CCService/shipRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCServiceServer).ShipRegister(ctx, req.(*wrapperspb.FloatValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCService_AllShips_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCServiceServer).AllShips(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/space_traffic_control.CCService/allShips",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCServiceServer).AllShips(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// CCService_ServiceDesc is the grpc.ServiceDesc for CCService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CCService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "space_traffic_control.CCService",
	HandlerType: (*CCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "stationRegister",
			Handler:    _CCService_StationRegister_Handler,
		},
		{
			MethodName: "allStations",
			Handler:    _CCService_AllStations_Handler,
		},
		{
			MethodName: "shipRegister",
			Handler:    _CCService_ShipRegister_Handler,
		},
		{
			MethodName: "allShips",
			Handler:    _CCService_AllShips_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// ShippingStationClient is the client API for ShippingStation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShippingStationClient interface {
	RequestLand(ctx context.Context, in *RequestDemand, opts ...grpc.CallOption) (*Command, error)
	Landing(ctx context.Context, in *RequestDemand, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type shippingStationClient struct {
	cc grpc.ClientConnInterface
}

func NewShippingStationClient(cc grpc.ClientConnInterface) ShippingStationClient {
	return &shippingStationClient{cc}
}

func (c *shippingStationClient) RequestLand(ctx context.Context, in *RequestDemand, opts ...grpc.CallOption) (*Command, error) {
	out := new(Command)
	err := c.cc.Invoke(ctx, "/space_traffic_control.ShippingStation/requestLand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingStationClient) Landing(ctx context.Context, in *RequestDemand, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/space_traffic_control.ShippingStation/landing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShippingStationServer is the server API for ShippingStation service.
// All implementations must embed UnimplementedShippingStationServer
// for forward compatibility
type ShippingStationServer interface {
	RequestLand(context.Context, *RequestDemand) (*Command, error)
	Landing(context.Context, *RequestDemand) (*emptypb.Empty, error)
	mustEmbedUnimplementedShippingStationServer()
}

// UnimplementedShippingStationServer must be embedded to have forward compatible implementations.
type UnimplementedShippingStationServer struct {
}

func (UnimplementedShippingStationServer) RequestLand(context.Context, *RequestDemand) (*Command, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestLand not implemented")
}
func (UnimplementedShippingStationServer) Landing(context.Context, *RequestDemand) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Landing not implemented")
}
func (UnimplementedShippingStationServer) mustEmbedUnimplementedShippingStationServer() {}

// UnsafeShippingStationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShippingStationServer will
// result in compilation errors.
type UnsafeShippingStationServer interface {
	mustEmbedUnimplementedShippingStationServer()
}

func RegisterShippingStationServer(s grpc.ServiceRegistrar, srv ShippingStationServer) {
	s.RegisterService(&ShippingStation_ServiceDesc, srv)
}

func _ShippingStation_RequestLand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDemand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingStationServer).RequestLand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/space_traffic_control.ShippingStation/requestLand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingStationServer).RequestLand(ctx, req.(*RequestDemand))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingStation_Landing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDemand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingStationServer).Landing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/space_traffic_control.ShippingStation/landing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingStationServer).Landing(ctx, req.(*RequestDemand))
	}
	return interceptor(ctx, in, info, handler)
}

// ShippingStation_ServiceDesc is the grpc.ServiceDesc for ShippingStation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShippingStation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "space_traffic_control.ShippingStation",
	HandlerType: (*ShippingStationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "requestLand",
			Handler:    _ShippingStation_RequestLand_Handler,
		},
		{
			MethodName: "landing",
			Handler:    _ShippingStation_Landing_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
