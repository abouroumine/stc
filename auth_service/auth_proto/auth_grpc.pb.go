// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package auth_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthenticationInfoClient is the client API for AuthenticationInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthenticationInfoClient interface {
	Login(ctx context.Context, in *UserAuth, opts ...grpc.CallOption) (*JWTResponse, error)
	CheckInfoDB(ctx context.Context, in *UserAuth, opts ...grpc.CallOption) (*UserAuth, error)
}

type authenticationInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthenticationInfoClient(cc grpc.ClientConnInterface) AuthenticationInfoClient {
	return &authenticationInfoClient{cc}
}

func (c *authenticationInfoClient) Login(ctx context.Context, in *UserAuth, opts ...grpc.CallOption) (*JWTResponse, error) {
	out := new(JWTResponse)
	err := c.cc.Invoke(ctx, "/space_traffic_control.AuthenticationInfo/login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationInfoClient) CheckInfoDB(ctx context.Context, in *UserAuth, opts ...grpc.CallOption) (*UserAuth, error) {
	out := new(UserAuth)
	err := c.cc.Invoke(ctx, "/space_traffic_control.AuthenticationInfo/checkInfoDB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthenticationInfoServer is the server API for AuthenticationInfo service.
// All implementations must embed UnimplementedAuthenticationInfoServer
// for forward compatibility
type AuthenticationInfoServer interface {
	Login(context.Context, *UserAuth) (*JWTResponse, error)
	CheckInfoDB(context.Context, *UserAuth) (*UserAuth, error)
	mustEmbedUnimplementedAuthenticationInfoServer()
}

// UnimplementedAuthenticationInfoServer must be embedded to have forward compatible implementations.
type UnimplementedAuthenticationInfoServer struct {
}

func (UnimplementedAuthenticationInfoServer) Login(context.Context, *UserAuth) (*JWTResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthenticationInfoServer) CheckInfoDB(context.Context, *UserAuth) (*UserAuth, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckInfoDB not implemented")
}
func (UnimplementedAuthenticationInfoServer) mustEmbedUnimplementedAuthenticationInfoServer() {}

// UnsafeAuthenticationInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthenticationInfoServer will
// result in compilation errors.
type UnsafeAuthenticationInfoServer interface {
	mustEmbedUnimplementedAuthenticationInfoServer()
}

func RegisterAuthenticationInfoServer(s grpc.ServiceRegistrar, srv AuthenticationInfoServer) {
	s.RegisterService(&AuthenticationInfo_ServiceDesc, srv)
}

func _AuthenticationInfo_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAuth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationInfoServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/space_traffic_control.AuthenticationInfo/login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationInfoServer).Login(ctx, req.(*UserAuth))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationInfo_CheckInfoDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAuth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationInfoServer).CheckInfoDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/space_traffic_control.AuthenticationInfo/checkInfoDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationInfoServer).CheckInfoDB(ctx, req.(*UserAuth))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthenticationInfo_ServiceDesc is the grpc.ServiceDesc for AuthenticationInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthenticationInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "space_traffic_control.AuthenticationInfo",
	HandlerType: (*AuthenticationInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "login",
			Handler:    _AuthenticationInfo_Login_Handler,
		},
		{
			MethodName: "checkInfoDB",
			Handler:    _AuthenticationInfo_CheckInfoDB_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}
