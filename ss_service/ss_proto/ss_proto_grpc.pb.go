// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ss_server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShippingStationClient is the client API for ShippingStation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShippingStationClient interface {
	StationInfo(ctx context.Context, in *wrapperspb.Int32Value, opts ...grpc.CallOption) (*Station, error)
	ShipInfo(ctx context.Context, in *wrapperspb.Int32Value, opts ...grpc.CallOption) (*Ship, error)
	UpdateTheLandData(ctx context.Context, in *UpdateLandData, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RequestLand(ctx context.Context, in *RequestDemand, opts ...grpc.CallOption) (*Command, error)
	Landing(ctx context.Context, in *RequestDemand, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type shippingStationClient struct {
	cc grpc.ClientConnInterface
}

func NewShippingStationClient(cc grpc.ClientConnInterface) ShippingStationClient {
	return &shippingStationClient{cc}
}

func (c *shippingStationClient) StationInfo(ctx context.Context, in *wrapperspb.Int32Value, opts ...grpc.CallOption) (*Station, error) {
	out := new(Station)
	err := c.cc.Invoke(ctx, "/space_traffic_control.ShippingStation/stationInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingStationClient) ShipInfo(ctx context.Context, in *wrapperspb.Int32Value, opts ...grpc.CallOption) (*Ship, error) {
	out := new(Ship)
	err := c.cc.Invoke(ctx, "/space_traffic_control.ShippingStation/shipInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingStationClient) UpdateTheLandData(ctx context.Context, in *UpdateLandData, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/space_traffic_control.ShippingStation/updateTheLandData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingStationClient) RequestLand(ctx context.Context, in *RequestDemand, opts ...grpc.CallOption) (*Command, error) {
	out := new(Command)
	err := c.cc.Invoke(ctx, "/space_traffic_control.ShippingStation/requestLand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingStationClient) Landing(ctx context.Context, in *RequestDemand, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/space_traffic_control.ShippingStation/landing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShippingStationServer is the server API for ShippingStation service.
// All implementations must embed UnimplementedShippingStationServer
// for forward compatibility
type ShippingStationServer interface {
	StationInfo(context.Context, *wrapperspb.Int32Value) (*Station, error)
	ShipInfo(context.Context, *wrapperspb.Int32Value) (*Ship, error)
	UpdateTheLandData(context.Context, *UpdateLandData) (*emptypb.Empty, error)
	RequestLand(context.Context, *RequestDemand) (*Command, error)
	Landing(context.Context, *RequestDemand) (*emptypb.Empty, error)
	mustEmbedUnimplementedShippingStationServer()
}

// UnimplementedShippingStationServer must be embedded to have forward compatible implementations.
type UnimplementedShippingStationServer struct {
}

func (UnimplementedShippingStationServer) StationInfo(context.Context, *wrapperspb.Int32Value) (*Station, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StationInfo not implemented")
}
func (UnimplementedShippingStationServer) ShipInfo(context.Context, *wrapperspb.Int32Value) (*Ship, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShipInfo not implemented")
}
func (UnimplementedShippingStationServer) UpdateTheLandData(context.Context, *UpdateLandData) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTheLandData not implemented")
}
func (UnimplementedShippingStationServer) RequestLand(context.Context, *RequestDemand) (*Command, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestLand not implemented")
}
func (UnimplementedShippingStationServer) Landing(context.Context, *RequestDemand) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Landing not implemented")
}
func (UnimplementedShippingStationServer) mustEmbedUnimplementedShippingStationServer() {}

// UnsafeShippingStationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShippingStationServer will
// result in compilation errors.
type UnsafeShippingStationServer interface {
	mustEmbedUnimplementedShippingStationServer()
}

func RegisterShippingStationServer(s grpc.ServiceRegistrar, srv ShippingStationServer) {
	s.RegisterService(&ShippingStation_ServiceDesc, srv)
}

func _ShippingStation_StationInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.Int32Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingStationServer).StationInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/space_traffic_control.ShippingStation/stationInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingStationServer).StationInfo(ctx, req.(*wrapperspb.Int32Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingStation_ShipInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.Int32Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingStationServer).ShipInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/space_traffic_control.ShippingStation/shipInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingStationServer).ShipInfo(ctx, req.(*wrapperspb.Int32Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingStation_UpdateTheLandData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLandData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingStationServer).UpdateTheLandData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/space_traffic_control.ShippingStation/updateTheLandData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingStationServer).UpdateTheLandData(ctx, req.(*UpdateLandData))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingStation_RequestLand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDemand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingStationServer).RequestLand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/space_traffic_control.ShippingStation/requestLand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingStationServer).RequestLand(ctx, req.(*RequestDemand))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingStation_Landing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDemand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingStationServer).Landing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/space_traffic_control.ShippingStation/landing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingStationServer).Landing(ctx, req.(*RequestDemand))
	}
	return interceptor(ctx, in, info, handler)
}

// ShippingStation_ServiceDesc is the grpc.ServiceDesc for ShippingStation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShippingStation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "space_traffic_control.ShippingStation",
	HandlerType: (*ShippingStationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "stationInfo",
			Handler:    _ShippingStation_StationInfo_Handler,
		},
		{
			MethodName: "shipInfo",
			Handler:    _ShippingStation_ShipInfo_Handler,
		},
		{
			MethodName: "updateTheLandData",
			Handler:    _ShippingStation_UpdateTheLandData_Handler,
		},
		{
			MethodName: "requestLand",
			Handler:    _ShippingStation_RequestLand_Handler,
		},
		{
			MethodName: "landing",
			Handler:    _ShippingStation_Landing_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ss_proto.proto",
}
